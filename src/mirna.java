
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jxl.*;
import org.python.util.PythonInterpreter; 
import org.python.core.*; 

import jxl.write.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author chethan
 */
public class mirna extends JFrame {
 PythonInterpreter python = new PythonInterpreter();
 
    /**
     * Creates new form mirna
     */
    public mirna() {
        initComponents();
        String selector[] = {"ATGCATGC", "ATGCCTGA", "ATGCGTAC", "ATGCGCTAG", "ATGCGCGTAGC", "ATGCCGTAGCGAT", "ATGGCCGTAG"};
        jComboBox1.setModel(new DefaultComboBoxModel(selector));
        setSize(1440, 790);
        setTitle("Identification and Validation of mRNA in the agriculture data");

    }
    // DefaultTableModel model=new DefaultTableModel();
    //JTable table=new JTable(model);
    //JFrame frame=new JFrame();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();

        jLabel5.setIcon(new javax.swing.ImageIcon("/home/chethan/workspace/image2.jpg")); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setBackground(java.awt.Color.red);
        jLabel1.setFont(new java.awt.Font("Waree", 1, 18)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("provide the RNAi sequence               :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(550, 80, 380, 33);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1);
        jTextField1.setBounds(940, 80, 260, 28);

        jLabel2.setFont(new java.awt.Font("Waree", 1, 18)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("Browse the Gene data set                 :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(550, 140, 390, 33);
        getContentPane().add(jTextField2);
        jTextField2.setBounds(940, 140, 260, 28);

        jButton1.setText("get file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(1220, 140, 110, 30);

        jLabel3.setFont(new java.awt.Font("Waree", 1, 18)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("Total No of times RNAi present        :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(550, 200, 380, 40);

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField3);
        jTextField3.setBounds(940, 200, 260, 28);

        jLabel4.setFont(new java.awt.Font("Waree", 1, 18)); // NOI18N
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("Length of the RNAi strand                :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(550, 260, 390, 40);

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField4);
        jTextField4.setBounds(940, 260, 260, 28);

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(940, 320, 260, 30);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(1220, 80, 110, 28);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gene ID", "genesymbol", "genebiotype", "transcriptbiotype", "count"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(86, 410, 860, 224);

        jButton4.setText("Export to Excel sheet");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(970, 670, 450, 30);

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField5);
        jTextField5.setBounds(510, 670, 430, 28);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Start", "End"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(970, 410, 442, 224);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dna.jpg"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(0, -30, 1790, 960);

        jCheckBox1.setText("jCheckBox1");
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(310, 270, 108, 24);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(""));
        fc.setDialogTitle("File Browser.");
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        if (fc.showOpenDialog(jButton1) == JFileChooser.APPROVE_OPTION) {
            jTextField2.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    void fillData(JTable table, File file) {

        try {

            WritableWorkbook workbook1 = Workbook.createWorkbook(file);
            WritableSheet sheet1 = workbook1.createSheet("First Sheet", 0);
            TableModel model = table.getModel();

            for (int i = 0; i < model.getColumnCount(); i++) {
                Label column = new Label(i, 0, model.getColumnName(i));
                sheet1.addCell(column);
            }
            int j = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                for (j = 0; j < model.getColumnCount(); j++) {
                    Label row = new Label(j, i + 1,
                            model.getValueAt(i, j).toString());
                    sheet1.addCell(row);
                }
            }
            workbook1.write();
            workbook1.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        DefaultTableModel modell = (DefaultTableModel) jTable1.getModel();

        DefaultTableModel modelll = (DefaultTableModel) jTable2.getModel();
        modell.setRowCount(0);
        modelll.setRowCount(0);

        String str2 = jTextField1.getText();
        String sequence = jTextField2.getText();
        char arr[] = new char[str2.length()];
        arr = str2.toCharArray();
        int count1 = 0;
        URL resource = this.getClass().getResource("a.py");
        // URL resource =this.getClass().getResource("gui/a.py");
        String name = resource.toString();
        System.out.println(name.substring(5));
        String name1 = name.substring(5);
        InputStream is = getClass().getResourceAsStream("a.py");
     String name2 = is.toString();
     BufferedReader reader = new BufferedReader (new InputStreamReader(is));

 String eg=jTextField2.getText();

  System.out.println(eg);   
        /*try {
            while((eg=reader.readLine())!=null)
            {
             System.out.println(eg);   
            }      } catch (IOException ex) {
            Logger.getLogger(mirna.class.getName()).log(Level.SEVERE, null, ex);
        }*/

        //File python = new File("data/a.py");
        //String name="/home/chethan/humangene/a.py";
        
python.set("inFile", new PyString(eg));
      
python.exec("#Imports:\n" +
"	\n" +
"import sys\n" +
"import re\n" +
"\n" +
"#===========================================================================================================\n" +
"# Main program code:\n" +
"	\n" +
"# House keeping...\n" +
"\n" +
"\n" +
"# Stores file one for input checking.\n" +

"outFile = inFile  "
        + " \n" +
"\n" +
"print(\">> Opening FASTA file...\")\n" +
"# Reads sequence file list and stores it as a string object. Safely closes file:\n" +
"try:	\n" +
"	with open(inFile,\"r\") as newFile:\n" +
"		sequences = newFile.read()\n" +
"		sequences = re.split(\"^>\", sequences, flags=re.MULTILINE) # Only splits string at the start of a line.\n" +
"		del sequences[0] # The first fasta in the file is split into an empty empty element and and the first fasta\n" +
"						 # Del removes this empty element.\n" +
"		newFile.close()\n" +
"except IOError:\n" +
"	print(\"Failed to open \" + inFile)\n" +
"	exit(1)\n" +
"\n" +
"print(\">> Converting FASTA file from multiline to single line and writing to file.\")\n" +
"# Conversts multiline fasta to single line. Writes new fasta to file.\n" +
"try:	\n" +
"	with open(outFile,\"w\") as newFasta:\n" +
"		for fasta in sequences:\n" +
"			try:\n" +
"				header, sequence = fasta.split(\"\\n\", 1) # Split each fasta into header and sequence.\n" +
"			except ValueError:\n" +
"				print(fasta)\n" +
"			header = \">\" + header + \"\\n\" # Replace \">\" lost in \">\" split, Replace \"\\n\" lost in split directly above.\n" +
"			sequence = sequence.replace(\"\\n\",\"\") + \"\\n\" # Replace newlines in sequence, remember to add one to the end.\n" +
"			newFasta.write(header + sequence)\n" +
"		newFasta.close()\n" +
"except IOError:\n" +
"	print(\"Failed to open \" + inFile)\n" +
"	exit(1)\n" +
"\n" +
"print(\">> Done!\")");


        
        
        
  /*      
        try {

            String[] cmd = {
                "python",
            name1,
                jTextField2.getText(),};

            Runtime.getRuntime().exec("python "+eg);
        } catch (Exception e) {
        }
*/
        try {
            Thread.sleep(3000);
        } catch (Exception e) {
        }

        int q;
        for (q = 0; q < arr.length; q++) {
            if (arr[q] == 'a' || arr[q] == 'A') {
                arr[q] = 't';
            } else if (arr[q] == 't' || arr[q] == 'T') {
                arr[q] = 'a';
            } else if (arr[q] == 'g' || arr[q] == 'G') {
                arr[q] = 'c';
            } else if (arr[q] == 'c' || arr[q] == 'C') {
                arr[q] = 'g';
            } else {
                JOptionPane.showMessageDialog(null, "INVALID NUCLEOTIDE SEQUENCE ENTERED!!!");
                System.exit(0);
            }

        }
        /*for(i=0;i<arr.length;i++)
        {
             System.out.print(arr[i]);
        }*/
        // System.out.println();

        String b = new String(arr);
        String genepattern = "gene:..................";
        int start2 = 0, end2 = 0, start3 = 0, end3 = 0, start4 = 0, end4 = 0, start5 = 0, end5 = 0;
        String s2 = "", s3 = "", s4 = "", s5 = "";

        String gsymbol = "gene_symbol:[A-Z|0-9|a-z|/-|_]{0,200}";
        String description = "description:.*";
        String chromosome = "gene_biotype:[A-Z|0-9|a-z|/-|_]{0,200}";
        String extra = "transcript_biotype:[A-Z|0-9|a-z|/-|_]{0,200}";
        Pattern gs = Pattern.compile(gsymbol);
        Pattern de = Pattern.compile(description);
        Pattern ch = Pattern.compile(chromosome);
        Pattern ex = Pattern.compile(extra);
        int gsb=0,chromo=0,genebio=0,transbio=0,ens=0;

        //System.out.print(b);
        Pattern patt = Pattern.compile(b, Pattern.CASE_INSENSITIVE);
        Pattern gene = Pattern.compile(genepattern);

        //  System.out.println("Start="+(start+(70*i))+"   End="+(end+(70*i)));
        String Start = "start";
        //model.addColumn(Start);
        //model.addColumn("end");
        //frame.setSize(300,100);
        //add(new JScrollPane(jTable1));
        //frame.setVisible(true);
        //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String line, s1 = "";
        int start1 = 0, end1 = 0;

        try {
            //  FileReader r = new FileReader(sequence);
            BufferedReader r = new BufferedReader(new FileReader(sequence));
            // StringBuilder every=new StringBuilder();
            int i = 0;
            int count = 0;

            while ((line = r.readLine()) != null) {
                Matcher m = patt.matcher(line);
                Matcher m1 = gene.matcher(line);
                Matcher gsm = gs.matcher(line);
                Matcher des = de.matcher(line);
                Matcher chr = ch.matcher(line);
                Matcher extr = ex.matcher(line);

                while (m.find()) {

                    //start[i]=new int();
                    // end[i]=new int();
                    int start = m.start(0);
                    int end = m.end(0);
                    //String strt=""+String.valueOf(start);
                    //String endd=""+String.valueOf(end);
                    String strt = "" + String.valueOf(start);
                    String endd = "" + String.valueOf(end);
                    modelll.addRow(new Object[]{strt, endd});

                    //table contents in netbeans
                    count++;
                    count1++;
                    //int s=start[i];
                    // int e=end;
                    //String strt="start="+String.valueOf(s);
                    //String endd="end="+String.valueOf(e);

                }
                while (m1.find()) {
                    // Get the starting position of the text
                    start1 = m1.start(0);
                    // Get ending position
                    end1 = m1.end(0);
                    s1 = line.substring(start1 + 5, end1);
                    ens++;
                }

                while (extr.find()) {
                    start5 = extr.start(0);
                    end5 = extr.end(0);
                    //  s5=line;
                    s5 = line.substring(start5 + 19, end5);
                    // s3=""+s3+""+s5;
                    transbio++;
                    

                }

                while (gsm.find()) {
                    start2 = gsm.start(0);
                    end2 = gsm.end(0);
                    s2 = line.substring(start2 + 12, end2);
                    gsb++;

                }
                while (des.find()) {

                    start3 = des.start(0);
                    end3 = des.end(0);
                    s3 = line.substring(start3, end3);

                }
                while (chr.find()) {
                    start4 = chr.start(0);
                    end4 = chr.end(0);
                    s4 = line.substring(start4 + 13, end4);
                    chromo++;

                }

                if (count > 0) {
                    
                    if(ens==gsb && ens==chromo && ens==transbio)
                    {
                       Object row[] = {s1, s2, s4, s5, count};
                       modell.addRow(row);  
                    }
                    
                    else if(ens!=gsb && ens==chromo && ens==transbio)
                    {
                       Object row[] = {s1,"", s4, s5, count};
                       modell.addRow(row);  
                    }
                    else if(ens==gsb && ens==chromo && ens!=transbio)
                    {
                       Object row[] = {s1,s2, s4,"", count};
                       modell.addRow(row);   
                    }
                    else if(ens==gsb && ens!=chromo && ens==transbio)
                    {
                       Object row[] = {s1, s2,"", s5, count};
                       modell.addRow(row);  
                    }
                    else if(ens!=gsb && ens!=chromo && ens!=transbio)
                    {
                      Object row[] = {s1, "", "", "", count};
                       modell.addRow(row);   
                    }
                    else if(ens!=gsb && ens!=chromo && ens==transbio)
                    {
                     Object row[] = {s1, "", "", s5, count};
                       modell.addRow(row);    
                    }
                    else if(ens!=gsb && ens==chromo && ens!=transbio)
                    {
                       Object row[] = {s1, "", s4, "", count};
                       modell.addRow(row);  
                    }
                    else if(ens==gsb && ens!=chromo && ens!=transbio)
                    {
                     Object row[] = {s1, s2, "", "", count};
                       modell.addRow(row);    
                    }
                    gsb=ens;
                    chromo=ens;
                    transbio=ens;
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                   

                }
                count = 0;

              //  i = i + 1;

            }
            // JOptionPane.showMessageDialog(null,"Count="+count);
            String strt = "count=" + String.valueOf(count1);
            jTextField3.setText(strt);
            int str2length = str2.length();
            jTextField4.setText(String.valueOf(str2length));

            count = 0;
            i = 0;

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "error");
        }
        /* catch(FileNotFoundException e)
          {
              JOptionPane.showMessageDialog(this,"error");
            }
         */

 /*try
		{
			java.sql.Statement s= conn.createStatement();
			String query="SELECT * FROM users";
			java.sql.ResultSet r=s.executeQuery(query);
			r.next();
			int x=r.getRow();
			if(x>0)
			{
                              /* String query1="insert into users(uname,password)"+"values(?,?)";
                                java.sql.PreparedStatement p=conn.prepareStatement(query1);
                                p.setString(1,"CHETHAN");
                                p.setString(2,"PASSWORD");
                                p.execute();*/
        //loadFile(newpanel);
        //super.dispose();
        //Process processCompile=Runtime.getRuntime().exec("javac newpanel.java");
        //Process processRun=null;
        // processRun=Runtime.getRuntime().exec("java newpanel");
        //System.exit(0);
        //JOptionPane.showMessageDialog(null,"WELCOME");
        /*	}
			else
			{
				JOptionPane.showMessageDialog(this,"incorrect login or password","error",JOptionPane.ERROR_MESSAGE);
			}
		}
		catch(Exception e)
		{
			System.out.println(e);
			System.exit(0);
		}*/

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String assign = String.valueOf(jComboBox1.getSelectedItem());
        jTextField1.setText(assign);

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(""));
        fc.setDialogTitle("File Browser.");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showOpenDialog(jButton4) == JFileChooser.APPROVE_OPTION) {
            jTextField5.setText(fc.getSelectedFile().getAbsolutePath());
        }

        String filedhu = jTextField5.getText();

        try {
            // ExcelExporter exp = new ExcelExporter();
            fillData(jTable1, new File(filedhu + "/" + jTextField1.getText() + ".xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + filedhu, "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mirna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mirna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mirna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mirna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new mirna().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
